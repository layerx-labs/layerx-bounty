/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface MultiSigWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmTransaction"
      | "executeTransaction"
      | "getOwners"
      | "getTransaction"
      | "getTransactionCount"
      | "isConfirmed"
      | "isOwner"
      | "numConfirmationsRequired"
      | "owners"
      | "revokeConfirmation"
      | "submitTransaction"
      | "transactions"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfirmTransaction"
      | "Deposit"
      | "ExecuteTransaction"
      | "RevokeConfirmation"
      | "SubmitTransaction"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isConfirmed",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "numConfirmationsRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeConfirmation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTransaction",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numConfirmationsRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeConfirmation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
}

export namespace ConfirmTransactionEvent {
  export type InputTuple = [owner: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [owner: string, txIndex: bigint];
  export interface OutputObject {
    owner: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    balance: BigNumberish
  ];
  export type OutputTuple = [sender: string, amount: bigint, balance: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    balance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteTransactionEvent {
  export type InputTuple = [owner: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [owner: string, txIndex: bigint];
  export interface OutputObject {
    owner: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RevokeConfirmationEvent {
  export type InputTuple = [owner: AddressLike, txIndex: BigNumberish];
  export type OutputTuple = [owner: string, txIndex: bigint];
  export interface OutputObject {
    owner: string;
    txIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SubmitTransactionEvent {
  export type InputTuple = [
    owner: AddressLike,
    txIndex: BigNumberish,
    to: AddressLike,
    value: BigNumberish,
    data: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    txIndex: bigint,
    to: string,
    value: bigint,
    data: string
  ];
  export interface OutputObject {
    owner: string;
    txIndex: bigint;
    to: string;
    value: bigint;
    data: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MultiSigWallet extends BaseContract {
  connect(runner?: ContractRunner | null): MultiSigWallet;
  waitForDeployment(): Promise<this>;

  interface: MultiSigWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  confirmTransaction: TypedContractMethod<
    [_txIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransaction: TypedContractMethod<
    [_txIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOwners: TypedContractMethod<[], [string[]], "view">;

  getTransaction: TypedContractMethod<
    [_txIndex: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        numConfirmations: bigint;
      }
    ],
    "view"
  >;

  getTransactionCount: TypedContractMethod<[], [bigint], "view">;

  isConfirmed: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  isOwner: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  numConfirmationsRequired: TypedContractMethod<[], [bigint], "view">;

  owners: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  revokeConfirmation: TypedContractMethod<
    [_txIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  submitTransaction: TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;

  transactions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        numConfirmations: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmTransaction"
  ): TypedContractMethod<[_txIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransaction"
  ): TypedContractMethod<[_txIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOwners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransaction"
  ): TypedContractMethod<
    [_txIndex: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        numConfirmations: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTransactionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isConfirmed"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "numConfirmationsRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owners"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "revokeConfirmation"
  ): TypedContractMethod<[_txIndex: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitTransaction"
  ): TypedContractMethod<
    [_to: AddressLike, _value: BigNumberish, _data: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transactions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, string, boolean, bigint] & {
        to: string;
        value: bigint;
        data: string;
        executed: boolean;
        numConfirmations: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ConfirmTransaction"
  ): TypedContractEvent<
    ConfirmTransactionEvent.InputTuple,
    ConfirmTransactionEvent.OutputTuple,
    ConfirmTransactionEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteTransaction"
  ): TypedContractEvent<
    ExecuteTransactionEvent.InputTuple,
    ExecuteTransactionEvent.OutputTuple,
    ExecuteTransactionEvent.OutputObject
  >;
  getEvent(
    key: "RevokeConfirmation"
  ): TypedContractEvent<
    RevokeConfirmationEvent.InputTuple,
    RevokeConfirmationEvent.OutputTuple,
    RevokeConfirmationEvent.OutputObject
  >;
  getEvent(
    key: "SubmitTransaction"
  ): TypedContractEvent<
    SubmitTransactionEvent.InputTuple,
    SubmitTransactionEvent.OutputTuple,
    SubmitTransactionEvent.OutputObject
  >;

  filters: {
    "ConfirmTransaction(address,uint256)": TypedContractEvent<
      ConfirmTransactionEvent.InputTuple,
      ConfirmTransactionEvent.OutputTuple,
      ConfirmTransactionEvent.OutputObject
    >;
    ConfirmTransaction: TypedContractEvent<
      ConfirmTransactionEvent.InputTuple,
      ConfirmTransactionEvent.OutputTuple,
      ConfirmTransactionEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ExecuteTransaction(address,uint256)": TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;
    ExecuteTransaction: TypedContractEvent<
      ExecuteTransactionEvent.InputTuple,
      ExecuteTransactionEvent.OutputTuple,
      ExecuteTransactionEvent.OutputObject
    >;

    "RevokeConfirmation(address,uint256)": TypedContractEvent<
      RevokeConfirmationEvent.InputTuple,
      RevokeConfirmationEvent.OutputTuple,
      RevokeConfirmationEvent.OutputObject
    >;
    RevokeConfirmation: TypedContractEvent<
      RevokeConfirmationEvent.InputTuple,
      RevokeConfirmationEvent.OutputTuple,
      RevokeConfirmationEvent.OutputObject
    >;

    "SubmitTransaction(address,uint256,address,uint256,bytes)": TypedContractEvent<
      SubmitTransactionEvent.InputTuple,
      SubmitTransactionEvent.OutputTuple,
      SubmitTransactionEvent.OutputObject
    >;
    SubmitTransaction: TypedContractEvent<
      SubmitTransactionEvent.InputTuple,
      SubmitTransactionEvent.OutputTuple,
      SubmitTransactionEvent.OutputObject
    >;
  };
}
